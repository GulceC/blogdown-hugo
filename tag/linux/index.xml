<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux | Assoc.Prof.Dr. Alper YILMAZ</title><link>https://alpeyilmaz.github.io/blogdown-hugo/tag/linux/</link><atom:link href="https://alpeyilmaz.github.io/blogdown-hugo/tag/linux/index.xml" rel="self" type="application/rss+xml"/><description>linux</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2021</copyright><lastBuildDate>Thu, 08 Apr 2010 09:11:53 +0000</lastBuildDate><image><url>https://alpeyilmaz.github.io/blogdown-hugo/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url><title>linux</title><link>https://alpeyilmaz.github.io/blogdown-hugo/tag/linux/</link></image><item><title>Most used commands in history</title><link>https://alpeyilmaz.github.io/blogdown-hugo/post/2010-04-08-most-used-commands-in-history/</link><pubDate>Thu, 08 Apr 2010 09:11:53 +0000</pubDate><guid>https://alpeyilmaz.github.io/blogdown-hugo/post/2010-04-08-most-used-commands-in-history/</guid><description>&lt;p>Most of the &amp;ldquo;most used commands&amp;rdquo; approaches does not consider pipes and other complexities.&lt;/p>
&lt;p>This approach considers pipes, process substitution by backticks or &lt;code>$()&lt;/code> and multiple commands separated by &lt;code>;&lt;/code>&lt;/p>
&lt;p>Perl regular expression breaks up each line using &lt;code>|&lt;/code> or &lt;code>&amp;lt;(&lt;/code> or &lt;code>;&lt;/code> or ` or &lt;code>$(&lt;/code> and picks the first word (excluding &amp;ldquo;do&amp;rdquo; in case of for loops)&lt;/p>
&lt;pre>&lt;code class="language-bash">history | perl -F&amp;quot;\||&amp;lt;\(|;|\`|\\$\(&amp;quot; -alne 'foreach (@F) { print $1 if /\b((?!do)[a-z]+)\b/i }' | sort | uniq -c | sort -nr | head
&lt;/code>&lt;/pre>
&lt;p>Let&amp;rsquo;s generate a fake history file which looks like this:&lt;/p>
&lt;pre>&lt;code class="language-txt">1 command file | command file | command | command
2 command &amp;lt;(command file) &amp;lt;(command file)
3 command file &amp;gt; file
4 for i in `command file`; do command file; command file; done | command
5 for i in $(command file); do command file; command file | command; done
&lt;/code>&lt;/pre>
&lt;p>This approach successfully counts 16 occurrences of &amp;ldquo;command&amp;rdquo; and 2 occurrences of &amp;ldquo;for&amp;rdquo;.&lt;/p>
&lt;p>Note: if you are using lots of perl one-liners, the perl commands/functions will be counted as well in this approach, since semicolon is used as a separator&lt;/p></description></item><item><title>bash completion for scp</title><link>https://alpeyilmaz.github.io/blogdown-hugo/post/2010-03-10-bash-completion-for-scp/</link><pubDate>Wed, 10 Mar 2010 16:30:03 +0000</pubDate><guid>https://alpeyilmaz.github.io/blogdown-hugo/post/2010-03-10-bash-completion-for-scp/</guid><description>&lt;p>I have been looking for a solution for broken bash_completion for scp command. I was thinking my ssh was not configured correctly for password-less login. But I just found out that bash completion is broken for Ubuntu 9.10.&lt;/p>
&lt;p>If you are suffering from same symptom, please read &lt;a href="http://pro.grammatic.org/post-fixing-scp-completion-in-ubuntu-910-73.aspx" target="_blank" rel="noopener">this article&lt;/a> for fix.&lt;/p></description></item></channel></rss>